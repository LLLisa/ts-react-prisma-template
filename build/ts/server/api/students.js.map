{"version":3,"file":"students.js","sourceRoot":"","sources":["../../../../ts/server/api/students.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,sDAA8B;AAC9B,2CAA8C;AAG9C,MAAM,MAAM,GAAG,IAAI,qBAAY,EAAE,CAAC;AAClC,MAAM,MAAM,GAAG,iBAAO,CAAC,MAAM,EAAE,CAAC;AAEhC,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC1C,IAAI;QACF,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC;QACpD,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC;KACvB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC1C,IAAI;QACF,MAAM,UAAU,GAAmB,MAAM,MAAM,CAAC,OAAO,CAAC,UAAU,CAAC;YACjE,KAAK,EAAE;gBACL,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,GAAG,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IACxC,IAAI;QACF,MAAM,UAAU,GAAY,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACtD,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,GAAG,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC1C,IAAI;QACF,MAAM,UAAU,GAAY,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YACtD,KAAK,EAAE;gBACL,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aAC1B;YACD,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;KACtB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,CAAO,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,EAAE;IAC7C,IAAI;QACF,MAAM,aAAa,GAAmB,MAAM,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC;YAChE,KAAK,EAAE;gBACL,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAAC;aAC1B;SACF,CAAC,CAAC;QACH,GAAG,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;KACzB;IAAC,OAAO,KAAK,EAAE;QACd,IAAI,CAAC,KAAK,CAAC,CAAC;KACb;AACH,CAAC,CAAA,CAAC,CAAC;AAEH,kBAAe,MAAM,CAAC","sourcesContent":["import express from 'express';\nimport { PrismaClient } from '@prisma/client';\nimport { Student } from '@prisma/client';\n\nconst prisma = new PrismaClient();\nconst router = express.Router();\n\nrouter.get('/all', async (req, res, next) => {\n  try {\n    const allStudents = await prisma.student.findMany();\n    res.send(allStudents);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.get('/:id', async (req, res, next) => {\n  try {\n    const oneStudent: Student | null = await prisma.student.findUnique({\n      where: {\n        id: Number(req.params.id),\n      },\n    });\n    res.send(oneStudent);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.post('/', async (req, res, next) => {\n  try {\n    const newStudent: Student = await prisma.student.create({\n      data: req.body,\n    });\n    res.send(newStudent);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.put('/:id', async (req, res, next) => {\n  try {\n    const oneStudent: Student = await prisma.student.update({\n      where: {\n        id: Number(req.params.id),\n      },\n      data: req.body,\n    });\n    res.send(oneStudent);\n  } catch (error) {\n    next(error);\n  }\n});\n\nrouter.delete('/:id', async (req, res, next) => {\n  try {\n    const doomedStudent: Student | null = await prisma.student.delete({\n      where: {\n        id: Number(req.params.id),\n      },\n    });\n    res.send(doomedStudent);\n  } catch (error) {\n    next(error);\n  }\n});\n\nexport default router;\n"]}